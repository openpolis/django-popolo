# Generated by Django 2.2.13 on 2020-10-01 15:51

import autoslug.fields
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.text
import popolo.behaviors.models
import popolo.mixins
import popolo.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.CharField(blank=True, help_text='The date when the validity of the item starts', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='start date')),
                ('end_date', models.CharField(blank=True, help_text='The date when the validity of the item ends', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='end date')),
                ('end_reason', models.CharField(blank=True, help_text="The reason why the entity isn't valid any longer (eg: merge)", max_length=255, null=True, verbose_name='end reason')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='creation time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='last modification time')),
                ('slug', autoslug.fields.AutoSlugField(editable=False, max_length=255, populate_from=popolo.behaviors.models.get_slug_source, slugify=django.utils.text.slugify, unique=True)),
                ('name', models.CharField(blank=True, help_text='The official, issued name', max_length=256, verbose_name='name')),
                ('identifier', models.CharField(blank=True, help_text='The main issued identifier', max_length=128, verbose_name='identifier')),
                ('classification', models.CharField(blank=True, help_text='An area category, according to GEONames definitions: http://www.geonames.org/export/codes.html', max_length=128, verbose_name='classification')),
                ('istat_classification', models.CharField(blank=True, choices=[('NAZ', 'Country'), ('RIP', 'Geographic partition'), ('REG', 'Region'), ('PROV', 'Province'), ('CM', 'Metropolitan area'), ('COM', 'Municipality'), ('MUN', 'Submunicipality'), ('ZU', 'Zone')], help_text='An area category, according to ISTAT: Ripartizione Geografica, Regione, Provincia, Citt√† Metropolitana, Comune', max_length=4, null=True, verbose_name='ISTAT classification')),
                ('is_provincial_capital', models.NullBooleanField(help_text='If the city is a provincial capital.Takes the Null value if not a municipality.', verbose_name='Is provincial capital')),
                ('geometry', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, help_text='The geometry of the area', null=True, srid=4326, verbose_name='Geometry')),
                ('inhabitants', models.PositiveIntegerField(blank=True, help_text='The total number of inhabitants', null=True, verbose_name='inhabitants')),
                ('new_places', models.ManyToManyField(blank=True, help_text='Link to area(s) after date_end', related_name='old_places', to='popolo.Area')),
                ('parent', models.ForeignKey(blank=True, help_text='The area that contains this area, as for the main administrative subdivision.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='popolo.Area', verbose_name='Main parent')),
            ],
            options={
                'verbose_name': 'Geographic Area',
                'verbose_name_plural': 'Geographic Areas',
            },
            bases=(popolo.mixins.SourceShortcutsMixin, popolo.mixins.LinkShortcutsMixin, popolo.mixins.IdentifierShortcutsMixin, popolo.mixins.OtherNamesShortcutsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Classification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.CharField(blank=True, help_text='The date when the validity of the item starts', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='start date')),
                ('end_date', models.CharField(blank=True, help_text='The date when the validity of the item ends', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='end date')),
                ('end_reason', models.CharField(blank=True, help_text="The reason why the entity isn't valid any longer (eg: merge)", max_length=255, null=True, verbose_name='end reason')),
                ('scheme', models.CharField(blank=True, help_text='A classification scheme, e.g. ATECO, or FORMA_GIURIDICA', max_length=128, verbose_name='scheme')),
                ('code', models.CharField(blank=True, help_text='An alphanumerical code in use within the scheme', max_length=128, null=True, verbose_name='code')),
                ('descr', models.CharField(blank=True, help_text='The extended, textual description of the classification', max_length=512, null=True, verbose_name='description')),
                ('parent', models.ForeignKey(blank=True, help_text='The parent classification.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='popolo.Classification')),
            ],
            options={
                'verbose_name': 'Classification',
                'verbose_name_plural': 'Classifications',
            },
            bases=(popolo.mixins.SourceShortcutsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='EducationLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Education level name', max_length=256, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'Normalized education level',
                'verbose_name_plural': 'Normalized education levels',
            },
            bases=(popolo.mixins.IdentifierShortcutsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='KeyEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.CharField(blank=True, help_text='The date when the validity of the item starts', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='start date')),
                ('end_date', models.CharField(blank=True, help_text='The date when the validity of the item ends', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='end date')),
                ('end_reason', models.CharField(blank=True, help_text="The reason why the entity isn't valid any longer (eg: merge)", max_length=255, null=True, verbose_name='end reason')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='creation time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='last modification time')),
                ('slug', autoslug.fields.AutoSlugField(editable=False, max_length=255, populate_from=popolo.behaviors.models.get_slug_source, slugify=django.utils.text.slugify, unique=True)),
                ('name', models.CharField(blank=True, help_text='A primary, generic name, e.g.: Local elections 2016', max_length=256, null=True, verbose_name='name')),
                ('event_type', models.CharField(choices=[('ELE', 'Election round'), ('ELE-POL', 'National election'), ('ELE-EU', 'European election'), ('ELE-REG', 'Regional election'), ('ELE-METRO', 'Metropolitan election'), ('ELE-PROV', 'Provincial election'), ('ELE-COM', 'Comunal election'), ('ITL', 'IT legislature'), ('EUL', 'EU legislature'), ('XAD', 'External administration')], default='ELE', help_text='The electoral type, e.g.: election, legislature, ...', max_length=12, verbose_name='event type')),
                ('identifier', models.CharField(blank=True, help_text='An issued identifier', max_length=512, null=True, verbose_name='identifier')),
            ],
            options={
                'verbose_name': 'Key event',
                'verbose_name_plural': 'Key events',
                'unique_together': {('start_date', 'event_type')},
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='English name of the language', max_length=128, verbose_name='name')),
                ('iso639_1_code', models.CharField(help_text='ISO 639_1 code, ex: en, it, de, fr, es, ...', max_length=2, unique=True, verbose_name='iso639_1 code')),
                ('dbpedia_resource', models.CharField(blank=True, help_text='DbPedia URI of the resource', max_length=255, null=True, unique=True, verbose_name='dbpedia resource')),
            ],
            options={
                'verbose_name': 'Language',
                'verbose_name_plural': 'Languages',
            },
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(help_text='A URL', max_length=350, verbose_name='url')),
                ('note', models.CharField(blank=True, help_text="A note, e.g. 'Wikipedia page'", max_length=512, verbose_name='note')),
            ],
            options={
                'verbose_name': 'Link',
                'verbose_name_plural': 'Links',
                'unique_together': {('url', 'note')},
            },
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.CharField(blank=True, help_text='The date when the validity of the item starts', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='start date')),
                ('end_date', models.CharField(blank=True, help_text='The date when the validity of the item ends', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='end date')),
                ('end_reason', models.CharField(blank=True, help_text="The reason why the entity isn't valid any longer (eg: merge)", max_length=255, null=True, verbose_name='end reason')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='creation time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='last modification time')),
                ('slug', autoslug.fields.AutoSlugField(editable=False, max_length=255, populate_from=popolo.behaviors.models.get_slug_source, slugify=django.utils.text.slugify, unique=True)),
                ('label', models.CharField(blank=True, help_text='A label describing the membership', max_length=512, null=True, verbose_name='label')),
                ('role', models.CharField(blank=True, help_text='The role that the member fulfills in the organization', max_length=512, null=True, verbose_name='role')),
                ('appointment_note', models.TextField(blank=True, help_text='A textual note for this appointment, if needed.', null=True, verbose_name='appointment note')),
                ('is_appointment_locked', models.BooleanField(default=False, help_text='A flag that shows if this appointment is locked (set to true when manually creating the appointment)')),
                ('constituency_descr_tmp', models.CharField(blank=True, max_length=128, null=True, verbose_name='Constituency location description')),
                ('electoral_list_descr_tmp', models.CharField(blank=True, max_length=512, null=True, verbose_name='Electoral list description')),
                ('appointed_by', models.ForeignKey(blank=True, help_text='The Membership that officially has appointed this one.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='appointees', to='popolo.Membership', verbose_name='Appointed by')),
                ('area', models.ForeignKey(blank=True, help_text='The geographic area to which the membership is related', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='popolo.Area', verbose_name='Area')),
                ('electoral_event', models.ForeignKey(blank=True, help_text='The electoral event that assigned this membership', limit_choices_to={'event_type__contains': 'ELE'}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='memberships_assigned', to='popolo.KeyEvent', verbose_name='Electoral event')),
            ],
            options={
                'verbose_name': 'Membership',
                'verbose_name_plural': 'Memberships',
            },
            bases=(popolo.mixins.ContactDetailsShortcutsMixin, popolo.mixins.LinkShortcutsMixin, popolo.mixins.SourceShortcutsMixin, popolo.mixins.ClassificationShortcutsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.CharField(blank=True, help_text='The date when the validity of the item starts', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='start date')),
                ('end_date', models.CharField(blank=True, help_text='The date when the validity of the item ends', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='end date')),
                ('end_reason', models.CharField(blank=True, help_text="The reason why the entity isn't valid any longer (eg: merge)", max_length=255, null=True, verbose_name='end reason')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='creation time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='last modification time')),
                ('slug', autoslug.fields.AutoSlugField(editable=False, max_length=255, populate_from=popolo.behaviors.models.get_slug_source, slugify=django.utils.text.slugify, unique=True)),
                ('name', models.CharField(help_text='A primary name, e.g. a legally recognized name', max_length=512, verbose_name='name')),
                ('identifier', models.CharField(blank=True, help_text='The main issued identifier, or fiscal code, for organization', max_length=128, null=True, verbose_name='identifier')),
                ('classification', models.CharField(blank=True, help_text='The nature of the organization, legal form in many cases', max_length=256, null=True, verbose_name='classification')),
                ('thematic_classification', models.CharField(blank=True, help_text='What the organization does, in what fields, ...', max_length=256, null=True, verbose_name='thematic classification')),
                ('abstract', models.CharField(blank=True, help_text='A one-line description of an organization', max_length=256, null=True, verbose_name='abstract')),
                ('description', models.TextField(blank=True, help_text='An extended description of an organization', null=True, verbose_name='biography')),
                ('founding_date', models.CharField(blank=True, help_text='A date of founding', max_length=10, null=True, validators=[django.core.validators.RegexValidator(code='invalid_founding_date', message='founding date must follow the given pattern: ^[0-9]{4}(-[0-9]{2}){0,2}$', regex='^[0-9]{4}(-[0-9]{2}){0,2}$')], verbose_name='founding date')),
                ('dissolution_date', models.CharField(blank=True, help_text='A date of dissolution', max_length=10, null=True, validators=[django.core.validators.RegexValidator(code='invalid_dissolution_date', message='dissolution date must follow the given pattern: ^[0-9]{4}(-[0-9]{2}){0,2}$', regex='^[0-9]{4}(-[0-9]{2}){0,2}$')], verbose_name='dissolution date')),
                ('image', models.URLField(blank=True, help_text='A URL of an image, to identify the organization visually', max_length=255, null=True, verbose_name='image')),
                ('area', models.ForeignKey(blank=True, help_text='The geographic area to which this organization is related', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='organizations', to='popolo.Area')),
                ('new_orgs', models.ManyToManyField(blank=True, help_text='Link to organization(s) after dissolution_date, needed to track mergers, acquisition, splits.', related_name='old_orgs', to='popolo.Organization')),
                ('organization_members', models.ManyToManyField(related_name='organizations_memberships', through='popolo.Membership', to='popolo.Organization')),
            ],
            options={
                'verbose_name': 'Organization',
                'verbose_name_plural': 'Organizations',
            },
            bases=(popolo.mixins.ContactDetailsShortcutsMixin, popolo.mixins.OtherNamesShortcutsMixin, popolo.mixins.IdentifierShortcutsMixin, popolo.mixins.ClassificationShortcutsMixin, popolo.mixins.LinkShortcutsMixin, popolo.mixins.SourceShortcutsMixin, popolo.mixins.OwnerShortcutsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='OriginalEducationLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Education level name', max_length=512, unique=True, verbose_name='name')),
                ('normalized_education_level', models.ForeignKey(blank=True, help_text='The normalized education_level', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='original_education_levels', to='popolo.EducationLevel')),
            ],
            options={
                'verbose_name': 'Original education level',
                'verbose_name_plural': 'Original education levels',
            },
        ),
        migrations.CreateModel(
            name='OriginalProfession',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The original profession name', max_length=512, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'Original profession',
                'verbose_name_plural': 'Original professions',
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.CharField(blank=True, help_text='The date when the validity of the item starts', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='start date')),
                ('end_date', models.CharField(blank=True, help_text='The date when the validity of the item ends', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='end date')),
                ('end_reason', models.CharField(blank=True, help_text="The reason why the entity isn't valid any longer (eg: merge)", max_length=255, null=True, verbose_name='end reason')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='creation time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='last modification time')),
                ('slug', autoslug.fields.AutoSlugField(editable=False, max_length=255, populate_from=popolo.behaviors.models.get_slug_source, slugify=django.utils.text.slugify, unique=True)),
                ('name', models.CharField(blank=True, db_index=True, help_text="A person's preferred full name", max_length=512, null=True, verbose_name='name')),
                ('family_name', models.CharField(blank=True, db_index=True, help_text='One or more family names', max_length=128, null=True, verbose_name='family name')),
                ('given_name', models.CharField(blank=True, db_index=True, help_text='One or more primary given names', max_length=128, null=True, verbose_name='given name')),
                ('additional_name', models.CharField(blank=True, help_text='One or more secondary given names', max_length=128, null=True, verbose_name='additional name')),
                ('honorific_prefix', models.CharField(blank=True, help_text="One or more honorifics preceding a person's name", max_length=32, null=True, verbose_name='honorific prefix')),
                ('honorific_suffix', models.CharField(blank=True, help_text="One or more honorifics following a person's name", max_length=32, null=True, verbose_name='honorific suffix')),
                ('patronymic_name', models.CharField(blank=True, help_text='One or more patronymic names', max_length=128, null=True, verbose_name='patronymic name')),
                ('sort_name', models.CharField(blank=True, db_index=True, help_text='A name to use in an lexicographically ordered list', max_length=128, null=True, verbose_name='sort name')),
                ('email', models.EmailField(blank=True, help_text='A preferred email address', max_length=254, null=True, verbose_name='email')),
                ('gender', models.CharField(blank=True, db_index=True, help_text='A gender', max_length=32, null=True, verbose_name='gender')),
                ('birth_date', models.CharField(blank=True, db_index=True, help_text='A date of birth', max_length=10, null=True, verbose_name='birth date')),
                ('birth_location', models.CharField(blank=True, help_text='Birth location as a string', max_length=128, null=True, verbose_name='birth location')),
                ('death_date', models.CharField(blank=True, db_index=True, help_text='A date of death', max_length=10, null=True, verbose_name='death date')),
                ('is_identity_verified', models.BooleanField(default=False, help_text='If tax_id was verified formally', verbose_name='identity verified')),
                ('image', models.URLField(blank=True, help_text='A URL of a head shot', null=True, verbose_name='image')),
                ('summary', models.CharField(blank=True, help_text="A one-line account of a person's life", max_length=1024, null=True, verbose_name='summary')),
                ('biography', models.TextField(blank=True, help_text="An extended account of a person's life", null=True, verbose_name='biography')),
                ('national_identity', models.CharField(blank=True, help_text='A national identity', max_length=128, null=True, verbose_name='national identity')),
                ('birth_location_area', models.ForeignKey(blank=True, help_text='The geographic area corresponding to the birth location', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='persons_born_here', to='popolo.Area', verbose_name='birth location Area')),
                ('education_level', models.ForeignKey(blank=True, help_text='The education level of this person', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='persons_with_this_education_level', to='popolo.EducationLevel', verbose_name='Normalized education level')),
                ('original_education_level', models.ForeignKey(blank=True, help_text='The education level of this person, non normalized', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='persons_with_this_original_education_level', to='popolo.OriginalEducationLevel', verbose_name='Non normalized education level')),
                ('original_profession', models.ForeignKey(blank=True, help_text='The profession of this person, non normalized', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='persons_with_this_original_profession', to='popolo.OriginalProfession', verbose_name='Non normalized profession')),
            ],
            options={
                'verbose_name': 'Person',
                'verbose_name_plural': 'People',
            },
            bases=(popolo.mixins.ContactDetailsShortcutsMixin, popolo.mixins.OtherNamesShortcutsMixin, popolo.mixins.IdentifierShortcutsMixin, popolo.mixins.ClassificationShortcutsMixin, popolo.mixins.LinkShortcutsMixin, popolo.mixins.SourceShortcutsMixin, popolo.mixins.OwnerShortcutsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Profession',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Normalized profession name', max_length=512, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'Normalized profession',
                'verbose_name_plural': 'Normalized professions',
            },
            bases=(popolo.mixins.IdentifierShortcutsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(help_text='A URL', max_length=350, verbose_name='url')),
                ('note', models.CharField(blank=True, help_text="A note, e.g. 'Parliament website'", max_length=512, verbose_name='note')),
            ],
            options={
                'verbose_name': 'Source',
                'verbose_name_plural': 'Sources',
                'unique_together': {('url', 'note')},
            },
        ),
        migrations.CreateModel(
            name='SourceRel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(db_index=True, null=True)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('source', models.ForeignKey(help_text='A Source instance assigned to this object', on_delete=django.db.models.deletion.CASCADE, related_name='related_objects', to='popolo.Source')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RoleType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(help_text='A label describing the post, better keep it unique and put the classification descr into it', max_length=512, unique=True, verbose_name='label')),
                ('other_label', models.CharField(blank=True, help_text='An alternate label, such as an abbreviation', max_length=32, null=True, verbose_name='other label')),
                ('is_appointer', models.BooleanField(default=False, help_text='Whether this is a role able to appoint other roles', verbose_name='is appointer')),
                ('is_appointable', models.BooleanField(default=False, help_text='Whether this is role can be appointed (by appointers)', verbose_name='is appointable')),
                ('priority', models.IntegerField(blank=True, help_text='The priority of this role type, within the same classification group', null=True, verbose_name='priority')),
                ('classification', models.ForeignKey(help_text='The OP_FORMA_GIURIDICA classification this role type is related to', limit_choices_to={'scheme': 'FORMA_GIURIDICA_OP'}, on_delete=django.db.models.deletion.CASCADE, related_name='role_types', to='popolo.Classification')),
            ],
            options={
                'verbose_name': 'Role type',
                'verbose_name_plural': 'Role types',
                'unique_together': {('classification', 'label')},
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.CharField(blank=True, help_text='The date when the validity of the item starts', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='start date')),
                ('end_date', models.CharField(blank=True, help_text='The date when the validity of the item ends', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='end date')),
                ('end_reason', models.CharField(blank=True, help_text="The reason why the entity isn't valid any longer (eg: merge)", max_length=255, null=True, verbose_name='end reason')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='creation time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='last modification time')),
                ('slug', autoslug.fields.AutoSlugField(editable=False, max_length=255, populate_from=popolo.behaviors.models.get_slug_source, slugify=django.utils.text.slugify, unique=True)),
                ('label', models.CharField(blank=True, help_text='A label describing the post', max_length=512, verbose_name='label')),
                ('other_label', models.CharField(blank=True, help_text='An alternate label, such as an abbreviation', max_length=32, null=True, verbose_name='other label')),
                ('role', models.CharField(blank=True, help_text='The function that the holder of the post fulfills', max_length=512, null=True, verbose_name='role')),
                ('priority', models.FloatField(blank=True, help_text='The absolute priority of this specific post, with respect to all others.', null=True, verbose_name='priority')),
                ('appointment_note', models.TextField(blank=True, help_text='A textual note for this appointment rule, if needed', null=True, verbose_name='appointment note')),
                ('is_appointment_locked', models.BooleanField(default=False, help_text='A flag that shows if this appointment rule is locked (set to true when manually creating the rule)')),
                ('appointed_by', models.ForeignKey(blank=True, help_text='The Post that officially appoints members to this one (appointment rule), ex: Secr. of Defence is appointed by POTUS', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='appointees', to='popolo.Post', verbose_name='Appointed by')),
                ('area', models.ForeignKey(blank=True, help_text='The geographic area to which the post is related', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='popolo.Area', verbose_name='Area')),
                ('holders', models.ManyToManyField(related_name='roles_held', through='popolo.Membership', to='popolo.Person')),
                ('organization', models.ForeignKey(blank=True, help_text='The organization in which the post is held', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='popolo.Organization', verbose_name='Organization')),
                ('organizations', models.ManyToManyField(related_name='posts_available', through='popolo.Membership', to='popolo.Organization')),
                ('role_type', models.ForeignKey(blank=True, help_text='The structured role type for this post', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='popolo.RoleType', verbose_name='Role type')),
            ],
            options={
                'verbose_name': 'Post',
                'verbose_name_plural': 'Posts',
            },
            bases=(popolo.mixins.ContactDetailsShortcutsMixin, popolo.mixins.LinkShortcutsMixin, popolo.mixins.SourceShortcutsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='PersonalRelationship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.CharField(blank=True, help_text='The date when the validity of the item starts', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='start date')),
                ('end_date', models.CharField(blank=True, help_text='The date when the validity of the item ends', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='end date')),
                ('end_reason', models.CharField(blank=True, help_text="The reason why the entity isn't valid any longer (eg: merge)", max_length=255, null=True, verbose_name='end reason')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='creation time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='last modification time')),
                ('weight', models.IntegerField(choices=[(-1, 'Strongly negative'), (-2, 'Negative'), (0, 'Neutral'), (1, 'Positive'), (2, 'Strongly positive')], default=0, help_text='The relationship weight, from strongly negative, to strongly positive', verbose_name='weight')),
                ('descr', models.CharField(blank=True, help_text='Some details on the relationship (not much, though)', max_length=512, null=True, verbose_name='Description')),
                ('classification', models.ForeignKey(help_text='The classification for this personal relationship', limit_choices_to={'scheme': 'OP_TIPO_RELAZIONE_PERS'}, on_delete=django.db.models.deletion.CASCADE, related_name='personal_relationships', to='popolo.Classification')),
                ('dest_person', models.ForeignKey(help_text='The Person the relationship ends to', on_delete=django.db.models.deletion.CASCADE, related_name='from_relationships', to='popolo.Person', verbose_name='Destination person')),
                ('source_person', models.ForeignKey(help_text='The Person the relation starts from', on_delete=django.db.models.deletion.CASCADE, related_name='to_relationships', to='popolo.Person', verbose_name='Source person')),
            ],
            options={
                'verbose_name': 'Personal relationship',
                'verbose_name_plural': 'Personal relationships',
                'unique_together': {('source_person', 'dest_person', 'classification')},
            },
            bases=(popolo.mixins.SourceShortcutsMixin, models.Model),
        ),
        migrations.AddField(
            model_name='person',
            name='profession',
            field=models.ForeignKey(blank=True, help_text='The profession of this person', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='persons_with_this_profession', to='popolo.Profession', verbose_name='Normalized profession'),
        ),
        migrations.AddField(
            model_name='person',
            name='related_persons',
            field=models.ManyToManyField(through='popolo.PersonalRelationship', to='popolo.Person'),
        ),
        migrations.CreateModel(
            name='Ownership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.CharField(blank=True, help_text='The date when the validity of the item starts', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='start date')),
                ('end_date', models.CharField(blank=True, help_text='The date when the validity of the item ends', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='end date')),
                ('end_reason', models.CharField(blank=True, help_text="The reason why the entity isn't valid any longer (eg: merge)", max_length=255, null=True, verbose_name='end reason')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='creation time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='last modification time')),
                ('slug', autoslug.fields.AutoSlugField(editable=False, max_length=255, populate_from=popolo.behaviors.models.get_slug_source, slugify=django.utils.text.slugify, unique=True)),
                ('percentage', models.FloatField(help_text='The *required* percentage ownership, expressed as a floating number, from 0 to 1', validators=[popolo.validators.validate_percentage], verbose_name='percentage ownership')),
                ('owned_organization', models.ForeignKey(help_text='The owned organization', on_delete=django.db.models.deletion.CASCADE, related_name='ownerships_as_owned', to='popolo.Organization', verbose_name='Owned organization')),
                ('owner_organization', models.ForeignKey(blank=True, help_text='An organization owning part of this organization', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ownerships', to='popolo.Organization', verbose_name='Owning organization')),
                ('owner_person', models.ForeignKey(blank=True, help_text='A person owning part of this organization.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ownerships', to='popolo.Person', verbose_name='Person')),
            ],
            options={
                'verbose_name': 'Ownership',
                'verbose_name_plural': 'Ownerships',
            },
            bases=(popolo.mixins.SourceShortcutsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='OtherName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(db_index=True, null=True)),
                ('start_date', models.CharField(blank=True, help_text='The date when the validity of the item starts', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='start date')),
                ('end_date', models.CharField(blank=True, help_text='The date when the validity of the item ends', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='end date')),
                ('end_reason', models.CharField(blank=True, help_text="The reason why the entity isn't valid any longer (eg: merge)", max_length=255, null=True, verbose_name='end reason')),
                ('name', models.CharField(help_text='An alternate or former name', max_length=512, verbose_name='name')),
                ('othername_type', models.CharField(choices=[('FOR', 'Former name'), ('ALT', 'Alternate name'), ('AKA', 'Also Known As'), ('NIC', 'Nickname'), ('ACR', 'Acronym')], default='ALT', help_text='Type of other name, e.g. FOR: former, ALT: alternate, ...', max_length=3, verbose_name='scheme')),
                ('note', models.CharField(blank=True, help_text="An extended note, e.g. 'Birth name used before marrige'", max_length=1024, null=True, verbose_name='note')),
                ('source', models.URLField(blank=True, help_text='The URL of the source where this information comes from', max_length=256, null=True, verbose_name='source')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name': 'Other name',
                'verbose_name_plural': 'Other names',
            },
        ),
        migrations.AddField(
            model_name='originalprofession',
            name='normalized_profession',
            field=models.ForeignKey(blank=True, help_text='The normalized profession', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='original_professions', to='popolo.Profession'),
        ),
        migrations.AddField(
            model_name='organization',
            name='organization_owners',
            field=models.ManyToManyField(related_name='organization_ownerships', through='popolo.Ownership', to='popolo.Organization'),
        ),
        migrations.AddField(
            model_name='organization',
            name='parent',
            field=models.ForeignKey(blank=True, help_text='The organization that contains this organization', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='popolo.Organization', verbose_name='Parent'),
        ),
        migrations.AddField(
            model_name='organization',
            name='person_members',
            field=models.ManyToManyField(related_name='organizations_memberships', through='popolo.Membership', to='popolo.Person'),
        ),
        migrations.AddField(
            model_name='organization',
            name='person_owners',
            field=models.ManyToManyField(related_name='organizations_ownerships', through='popolo.Ownership', to='popolo.Person'),
        ),
        migrations.AddField(
            model_name='membership',
            name='member_organization',
            field=models.ForeignKey(blank=True, help_text='The organization who is a member of the organization', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='memberships_as_member', to='popolo.Organization', verbose_name='Organization'),
        ),
        migrations.AddField(
            model_name='membership',
            name='on_behalf_of',
            field=models.ForeignKey(blank=True, help_text='The organization on whose behalf the person is a member of the organization', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='memberships_on_behalf_of', to='popolo.Organization', verbose_name='On behalf of'),
        ),
        migrations.AddField(
            model_name='membership',
            name='organization',
            field=models.ForeignKey(blank=True, help_text='The organization in which the person or organization is a member', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='popolo.Organization', verbose_name='Organization'),
        ),
        migrations.AddField(
            model_name='membership',
            name='person',
            field=models.ForeignKey(blank=True, help_text='The person who is a member of the organization', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='popolo.Person', verbose_name='Person'),
        ),
        migrations.AddField(
            model_name='membership',
            name='post',
            field=models.ForeignKey(blank=True, help_text='The post held by the person in the organization through this membership', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='popolo.Post', verbose_name='Post'),
        ),
        migrations.CreateModel(
            name='LinkRel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(db_index=True, null=True)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('link', models.ForeignKey(help_text='A relation to a Link instance assigned to this object', on_delete=django.db.models.deletion.CASCADE, related_name='related_objects', to='popolo.Link')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='KeyEventRel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(db_index=True, null=True)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('key_event', models.ForeignKey(help_text='A relation to a KeyEvent instance assigned to this object', on_delete=django.db.models.deletion.CASCADE, related_name='related_objects', to='popolo.KeyEvent')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Identifier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(db_index=True, null=True)),
                ('start_date', models.CharField(blank=True, help_text='The date when the validity of the item starts', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='start date')),
                ('end_date', models.CharField(blank=True, help_text='The date when the validity of the item ends', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='end date')),
                ('end_reason', models.CharField(blank=True, help_text="The reason why the entity isn't valid any longer (eg: merge)", max_length=255, null=True, verbose_name='end reason')),
                ('identifier', models.CharField(help_text='An issued identifier, e.g. a DUNS number', max_length=512, verbose_name='identifier')),
                ('scheme', models.CharField(blank=True, help_text='An identifier scheme, e.g. DUNS', max_length=128, verbose_name='scheme')),
                ('source', models.URLField(blank=True, help_text='The URL of the source where this information comes from', max_length=256, null=True, verbose_name='source')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name': 'Identifier',
                'verbose_name_plural': 'Identifiers',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='creation time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='last modification time')),
                ('name', models.CharField(help_text="The event's name", max_length=128, verbose_name='name')),
                ('description', models.CharField(blank=True, help_text="The event's description", max_length=512, null=True, verbose_name='description')),
                ('start_date', models.CharField(blank=True, help_text='The time at which the event starts', max_length=20, null=True, validators=[django.core.validators.RegexValidator(code='invalid_start_date', message='start date must follow the given pattern: ^[0-9]{4}((-[0-9]{2}){0,2}|(-[0-9]{2}){2}T[0-9]{2}(:[0-9]{2}){0,2}(Z|[+-][0-9]{2}(:[0-9]{2})?))$', regex='^[0-9]{4}((-[0-9]{2}){0,2}|(-[0-9]{2}){2}T[0-9]{2}(:[0-9]{2}){0,2}(Z|[+-][0-9]{2}(:[0-9]{2})?))$')], verbose_name='start date')),
                ('end_date', models.CharField(blank=True, help_text='The time at which the event ends', max_length=20, null=True, validators=[django.core.validators.RegexValidator(code='invalid_end_date', message='end date must follow the given pattern: ^[0-9]{4}((-[0-9]{2}){0,2}|(-[0-9]{2}){2}T[0-9]{2}(:[0-9]{2}){0,2}(Z|[+-][0-9]{2}(:[0-9]{2})?))$', regex='^[0-9]{4}((-[0-9]{2}){0,2}|(-[0-9]{2}){2}T[0-9]{2}(:[0-9]{2}){0,2}(Z|[+-][0-9]{2}(:[0-9]{2})?))$')], verbose_name='end date')),
                ('location', models.CharField(blank=True, help_text="The event's location", max_length=255, null=True, verbose_name='location')),
                ('status', models.CharField(blank=True, help_text="The event's status", max_length=128, null=True, verbose_name='status')),
                ('classification', models.CharField(blank=True, help_text="The event's category", max_length=128, null=True, verbose_name='classification')),
                ('area', models.ForeignKey(blank=True, help_text='The Area the Event is related to', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events', to='popolo.Area')),
                ('attendees', models.ManyToManyField(blank=True, help_text='People attending the event', related_name='attended_events', to='popolo.Person')),
                ('organization', models.ForeignKey(blank=True, help_text='The organization organizing the event', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events', to='popolo.Organization')),
                ('parent', models.ForeignKey(blank=True, help_text='The Event that this event is part of', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='popolo.Event', verbose_name='Parent')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
            },
            bases=(popolo.mixins.SourceShortcutsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ContactDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(db_index=True, null=True)),
                ('start_date', models.CharField(blank=True, help_text='The date when the validity of the item starts', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='start date')),
                ('end_date', models.CharField(blank=True, help_text='The date when the validity of the item ends', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='end date')),
                ('end_reason', models.CharField(blank=True, help_text="The reason why the entity isn't valid any longer (eg: merge)", max_length=255, null=True, verbose_name='end reason')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='creation time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='last modification time')),
                ('label', models.CharField(blank=True, help_text='A human-readable label for the contact detail', max_length=256, verbose_name='label')),
                ('contact_type', models.CharField(choices=[('ADDRESS', 'Address'), ('EMAIL', 'Email'), ('URL', 'Url'), ('MAIL', 'Snail mail'), ('TWITTER', 'Twitter'), ('FACEBOOK', 'Facebook'), ('PHONE', 'Telephone'), ('MOBILE', 'Mobile'), ('TEXT', 'Text'), ('VOICE', 'Voice'), ('FAX', 'Fax'), ('CELL', 'Cell'), ('VIDEO', 'Video'), ('INSTAGRAM', 'Instagram'), ('YOUTUBE', 'Youtube'), ('PAGER', 'Pager'), ('TEXTPHONE', 'Textphone')], help_text="A type of medium, e.g. 'fax' or 'email'", max_length=12, verbose_name='type')),
                ('value', models.CharField(help_text='A value, e.g. a phone number or email address', max_length=256, verbose_name='value')),
                ('note', models.CharField(blank=True, help_text='A note, e.g. for grouping contact details by physical location', max_length=512, null=True, verbose_name='note')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name': 'Contact detail',
                'verbose_name_plural': 'Contact details',
            },
            bases=(popolo.mixins.SourceShortcutsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ClassificationRel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(db_index=True, null=True)),
                ('start_date', models.CharField(blank=True, help_text='The date when the validity of the item starts', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='start date')),
                ('end_date', models.CharField(blank=True, help_text='The date when the validity of the item ends', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='end date')),
                ('end_reason', models.CharField(blank=True, help_text="The reason why the entity isn't valid any longer (eg: merge)", max_length=255, null=True, verbose_name='end reason')),
                ('classification', models.ForeignKey(help_text='A Classification instance assigned to this object', on_delete=django.db.models.deletion.CASCADE, related_name='related_objects', to='popolo.Classification')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AreaRelationship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.CharField(blank=True, help_text='The date when the validity of the item starts', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='start date')),
                ('end_date', models.CharField(blank=True, help_text='The date when the validity of the item ends', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='end date')),
                ('end_reason', models.CharField(blank=True, help_text="The reason why the entity isn't valid any longer (eg: merge)", max_length=255, null=True, verbose_name='end reason')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='creation time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='last modification time')),
                ('classification', models.CharField(choices=[('FIP', 'Former ISTAT parent'), ('AMP', 'Alternate mountain community parent'), ('ACP', 'Alternate consortium of municipality parent')], help_text='The relationship classification, ex: Former ISTAT parent, ...', max_length=3)),
                ('note', models.TextField(blank=True, help_text='Additional info about the relationship', null=True)),
                ('dest_area', models.ForeignKey(help_text='The Area the relationship ends to', on_delete=django.db.models.deletion.CASCADE, related_name='to_relationships', to='popolo.Area', verbose_name='Destination area')),
                ('source_area', models.ForeignKey(help_text='The Area the relation starts from', on_delete=django.db.models.deletion.CASCADE, related_name='from_relationships', to='popolo.Area', verbose_name='Source area')),
            ],
            options={
                'verbose_name': 'Area relationship',
                'verbose_name_plural': 'Area relationships',
            },
            bases=(popolo.mixins.SourceShortcutsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AreaI18Name',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='i18n_names', to='popolo.Area')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='popolo.Language', verbose_name='Language')),
            ],
            options={
                'verbose_name': 'I18N Name',
                'verbose_name_plural': 'I18N Names',
            },
        ),
        migrations.AddField(
            model_name='area',
            name='related_areas',
            field=models.ManyToManyField(help_text='Relationships between areas', related_name='inversely_related_areas', through='popolo.AreaRelationship', to='popolo.Area'),
        ),
        migrations.CreateModel(
            name='OrganizationRelationship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.CharField(blank=True, help_text='The date when the validity of the item starts', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='start date')),
                ('end_date', models.CharField(blank=True, help_text='The date when the validity of the item ends', max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Date has wrong format', regex='^[0-9]{4}(-[0-9]{2}){0,2}$'), popolo.behaviors.models.validate_partial_date], verbose_name='end date')),
                ('end_reason', models.CharField(blank=True, help_text="The reason why the entity isn't valid any longer (eg: merge)", max_length=255, null=True, verbose_name='end reason')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='creation time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='last modification time')),
                ('weight', models.IntegerField(choices=[(-1, 'Strongly negative'), (-2, 'Negative'), (0, 'Neutral'), (1, 'Positive'), (2, 'Strongly positive')], default=0, help_text='The relationship weight, from strongly negative, to strongly positive', verbose_name='weight')),
                ('descr', models.CharField(blank=True, help_text='Some details on the relationship (not much, though)', max_length=512, null=True, verbose_name='Description')),
                ('classification', models.ForeignKey(help_text='The classification for this organization relationship', limit_choices_to={'scheme': 'OP_TIPO_RELAZIONE_ORG'}, on_delete=django.db.models.deletion.CASCADE, related_name='organization_relationships', to='popolo.Classification')),
                ('dest_organization', models.ForeignKey(help_text='The Organization the relationship ends to', on_delete=django.db.models.deletion.CASCADE, related_name='from_relationships', to='popolo.Organization', verbose_name='Destination organization')),
                ('source_organization', models.ForeignKey(help_text='The Organization the relation starts from', on_delete=django.db.models.deletion.CASCADE, related_name='to_relationships', to='popolo.Organization', verbose_name='Source organization')),
            ],
            options={
                'verbose_name': 'Organization relationship',
                'verbose_name_plural': 'Organization relationships',
                'unique_together': {('source_organization', 'dest_organization', 'classification')},
            },
            bases=(popolo.mixins.SourceShortcutsMixin, models.Model),
        ),
        migrations.AlterUniqueTogether(
            name='organization',
            unique_together={('name', 'identifier', 'start_date')},
        ),
        migrations.AddIndex(
            model_name='identifier',
            index=models.Index(fields=['identifier'], name='popolo_iden_identif_ace930_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='event',
            unique_together={('name', 'start_date')},
        ),
        migrations.AlterUniqueTogether(
            name='classification',
            unique_together={('scheme', 'code', 'descr')},
        ),
        migrations.AlterUniqueTogether(
            name='areai18name',
            unique_together={('area', 'language', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='area',
            unique_together={('identifier', 'istat_classification')},
        ),
    ]
